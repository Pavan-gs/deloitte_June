/* Retriving Data */

/* SELECT, COMPUTED COLUMN, NULL,COLUMN ALIASES, CONCATENATION, STRING LITERAL, QUOTE OPERATOR, DUAL DB */

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID 
FROM EMPLOYEES

SELECT * FROM EMPLOYEES

SELECT FIRST_NAME, SALARY, SALARY+1000, DEPARTMENT_ID 
FROM EMPLOYEES

SELECT FIRST_NAME, JOB_ID, COMMISSION_PCT, SALARY, SALARY+COMMISSION_PCT+0.05
FROM EMPLOYEES

SELECT FIRST_NAME, SALARY, SALARY+1000 AS BONUS, DEPARTMENT_ID 
FROM EMPLOYEES

SELECT FIRST_NAME, SALARY, SALARY+1000 "MONTHLY BONUS", DEPARTMENT_ID 
FROM EMPLOYEES

SELECT FIRST_NAME || JOB_ID "NAME"
FROM EMPLOYEES

SELECT FIRST_NAME ||' works as a ' || JOB_ID "employee details"
FROM EMPLOYEES

SELECT DEPARTMENT_NAME || q'[ department's manager id is ]' || MANAGER_ID AS "DEPARTMENT_DETAILS"
FROM DEPARTMENTS

SELECT 64*71 AS "RANDOM"
FROM DUAL

SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES

DESCRIBE DEPARTMENTS

/* 
1)	How many unique departments have employees currently working in them?

2)	Query the JOBS table and return a single expression of the form The Job Id for the <job_title’s> job is: <job_id>. 
    Take note that the job_title should have an apostrophe and an “s” appended to it to read more naturally. 
    A sample of this output for the organization president is: 
    “The Job Id for the President’s job is: AD_PRES.” Alias this column expression as “Job Description” using the AS keyword.
*/ 

/* Restricting Data */

/* Where, operators (COMPARISON OPERATORS, AND, OR, NOT, BETWEEN, LIKE, IS NULL) with Where clause, Order By, Substitution variables */

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > 5000 AND DEPARTMENT_ID = 100;

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE NOT DEPARTMENT_ID = 90;

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY NOT BETWEEN 3000 AND 20000

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30,60,90)

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA%'

SELECT LAST_NAME, SALARY, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE LAST_NAME LIKE '_a%'

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA%'

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID, MANAGER_ID
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
ORDER BY SALARY DESC

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID, HIRE_DATE
FROM EMPLOYEES
ORDER BY HIRE_DATE DESC

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, JOB_ID, COMMISSION_PCT
FROM EMPLOYEES
ORDER BY COMMISSION_PCT DESC

/*
1)	Retrieve a list of DEPARTMENT_NAME values that end with the three letters “ing” and 
 second character is “a” from the DEPARTMENTS table

2)	Write a query that extracts the JOB_TITLE, MIN_SALARY, and MAX_SALARY columns, 
as well as an expression called VARIANCE, which is the difference between the MAX_SALARY and MIN_SALARY values, 
for each row. The result should include only JOB_TITLE values that contain either the word “President” or “Manager.” 
Sort the list in descending order based on the VARIANCE expression. If more than one row has the same VARIANCE value, 
then, sort these rows by JOB_TITLE in reverse alphabetic order.
*/

